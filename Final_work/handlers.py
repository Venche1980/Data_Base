# handlers.py
from telebot import types
from database import fetch_word, fetch_random_words, insert_user_word, delete_user_word, connect_db
from api import get_example_usage
from states import MyStates  # Import MyStates from states.py

COMMANDS = {
    'ADD_WORD': '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï',
    'DELETE_WORD': '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô',
    'NEXT': '–î–∞–ª—å—à–µ ‚è≠'
}

user_step = {}


def register_handlers(bot):
    @bot.message_handler(commands=['start'])
    def start_handler(message):
        cid = message.chat.id
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(
            cid,
            "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n"
            "–ü—Ä–∏—á—ë–º —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. "
            "–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï –∏–ª–∏ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô.\n\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
        next_cards_handler(message)

    @bot.message_handler(commands=['cards'])
    def next_cards_handler(message):
        cid = message.chat.id
        word_data = fetch_word(cid)
        if not word_data:
            bot.send_message(cid, "–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
            return

        target_word, translate = word_data
        example_usage = get_example_usage(target_word)
        other_words = fetch_random_words(target_word)
        options = [target_word] + other_words
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞
        buttons = [types.KeyboardButton(option) for option in sorted(options)]
        for i in range(0, len(buttons), 2):
            markup.add(*buttons[i:i + 2])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ", "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", –∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
        markup.add(
            types.KeyboardButton(COMMANDS['NEXT']),
            types.KeyboardButton(COMMANDS['ADD_WORD']),
            types.KeyboardButton(COMMANDS['DELETE_WORD'])
        )

        bot.send_message(
            cid,
            f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {example_usage}",
            reply_markup=markup
        )
        bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['target_word'] = target_word
            data['translate_word'] = translate

    @bot.message_handler(func=lambda message: message.text == COMMANDS['NEXT'])
    def process_next_command(message):
        next_cards_handler(message)

    @bot.message_handler(func=lambda message: message.text == COMMANDS['ADD_WORD'])
    def add_word_handler(message):
        cid = message.chat.id
        user_step[cid] = 1
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    @bot.message_handler(func=lambda message: message.text == COMMANDS['DELETE_WORD'])
    def delete_word_handler(message):
        cid = message.chat.id
        try:
            with connect_db() as conn:
                cur = conn.cursor()
                cur.execute("SELECT word_en FROM UserWords WHERE user_id = %s", (cid,))
                user_words = [row[0] for row in cur.fetchall()]

            if not user_words:
                bot.send_message(cid, "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.")
                return

            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
            for word in user_words:
                markup.add(types.KeyboardButton(word))
            bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            user_step[cid] = 2
        except Exception as e:
            bot.send_message(cid, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")

    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def handle_text_message(message):
        cid = message.chat.id
        text = message.text.strip()
        if user_step.get(cid) == 1:
            try:
                word_en, word_ru = map(str.strip, text.split(','))
                insert_user_word(cid, word_en, word_ru)

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                with connect_db() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT COUNT(*) FROM UserWords WHERE user_id = %s", (cid,))
                    word_count = cur.fetchone()[0]

                bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_en}' –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {word_count} —Å–ª–æ–≤.")
                user_step[cid] = 0
                next_cards_handler(message)
            except ValueError:
                bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: cat, –∫–æ—Ç.")
            except Exception as e:
                bot.send_message(cid, f"–û—à–∏–±–∫–∞: {e}")
        elif user_step.get(cid) == 2:
            delete_user_word(cid, text)
            bot.send_message(cid, f"–°–ª–æ–≤–æ '{text}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!")
            user_step[cid] = 0
            next_cards_handler(message)
        else:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                target_word = data.get('target_word', '')
                if text.lower() == target_word.lower():
                    bot.send_message(cid, "–û—Ç–ª–∏—á–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏. –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
                else:
                    bot.send_message(cid, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
